#!/usr/bin/env python
# Copyright (C) 2021 Vitor Lopes

from packageManager import Pamac
from utils import progressbar, get_branch, set_branch_mirrors
import os   
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk, GdkPixbuf, GLib
from sources import get_remote_source, load_yaml

pamac = Pamac()

class Wizard:
    def __init__(self):
        self.last_page = 0
        self.branch = get_branch()
        self.wizard = Gtk.Assistant()
        self.wizard.set_type_hint(Gdk.WindowTypeHint.SPLASHSCREEN)
        self.wizard.maximize()
        self.wizard.set_title("Wizard")
        self.wizard.connect('cancel', self.on_close_cancel)
        self.wizard.connect('close', self.on_close_cancel)
        self.wizard.connect('prepare', self.on_prepare)
        self.internet_timeout = GLib.timeout_add(300, self.check_internet, None)
        self.internet_label = Gtk.Label(
            label="Checking for internet connection."
        )
        self.intro()    
        self.wizard.show()  
        
    def check_internet(self, *args):
        try:          
            load_yaml().get("base")
            GLib.source_remove(self.internet_timeout)
            self.pages()
            self.internet_label.set_label("Internet Connected.")

        except Exception:
            self.internet_label.set_label("No internet, make sure you are connected.")
            return True
       
    def on_close_cancel(self, wizard):
        wizard.destroy()
        Gtk.main_quit()

    def on_apply(self, wizard, label):
        label.set_text("Installing, grab a cup of coffee")
        pamac.install()            

    def on_prepare(self, wizard, page):
        self.wizard.commit()
        current_page = self.wizard.get_current_page()
        print(f"selected packages on page:{current_page} {pamac.packages}")
        if current_page == 0:
            pass            
        elif current_page == 1:
            print(f"selected branch: {self.branch}")
            set_branch_mirrors(self.branch)
            pamac.check_packages(load_yaml().get("base"))
            pamac.check_packages(load_yaml().get("applications"))
        elif current_page == self.last_page:
            self.done_page()

    def on_input_changed(self, *args):
        user_input = args[0].get_text()
        user_data = load_yaml(
            source=get_remote_source(user_input)
            )
        pamac.check_packages( user_data.get("packages") )

    def app_on_select(self, btn, pkg):
        if btn.get_active():
            pamac.check_packages(pkg)
        else:
            try:
                pamac.packages.remove(pkg)
            except ValueError:
                pass
        print(pamac.packages)


    def intro(self):
        grid2 = Gtk.Grid()
        grid = Gtk.Grid()
        grid.set_row_spacing(20)
        grid.set_column_spacing(10)
        grid.set_column_homogeneous(True)
        grid.props.valign = grid.props.halign = Gtk.Align.CENTER
        self.wizard.add(grid)
        label1 = Gtk.Label()
        label1.set_markup(
            "Hi, lets personalize and finish installation."
        )       
        label1.get_style_context().add_class("large-fonts")
        self.internet_label.get_style_context().add_class("white-fonts")
        label3 = Gtk.Label(label="powered by Pamac.")
        label3.get_style_context().add_class("pamac")
        grid2.add(label3)        
        self.internet_label.set_line_wrap(True)
        label1.set_max_width_chars(32)
        entry = Gtk.Entry()
        entry.set_text("optional: insert a remote software workflow in yaml format")
        
        branches = (
            "Branch:  stable for users",
            "Branch:  testing for testers",
            "Branch:  unstable for developers"
                    )
        branch_name = Gtk.ComboBoxText()
        branch_name.connect("changed", self.on_branch_changed)
        for branch in branches:
            branch_name.append_text(branch)
        
        if "stable" == self.branch:
            active_branch = 0            
        elif "testing" == self.branch:
            active_branch = 1            
        elif "unstable" == self.branch:
            active_branch = 2
        branch_name.set_active(active_branch)
        
        grid.attach(label1, 0, 0, 1, 1)
        grid.attach(self.internet_label, 0, 5, 1, 1)
        grid.attach(grid2, 0, 4, 1, 1)
        grid.attach(entry, 0, 2, 1, 1)
        grid.attach(branch_name, 0, 3, 1, 1)
        grid.show_all()
        
        self.wizard.append_page(grid)
        self.wizard.set_page_complete(grid, True)
        self.wizard.set_page_title(grid, 'Remote Workflow')
        self.wizard.set_page_type(grid, Gtk.AssistantPageType.PROGRESS)
        entry.connect("changed", self.on_input_changed)

    def pages(self):     
        for p in load_yaml().get("software"):
            self.last_page += 1
            title = p["group"][0]["category"]
            pkg_list = p["group"][1]["packages"]
            box = Gtk.VBox(spacing=8)
            box.props.valign = Gtk.Align.CENTER
            box.props.halign = Gtk.Align.CENTER
            box.set_border_width(8)
            grid = Gtk.Grid()
            grid.get_style_context().add_class("apps")
            box.add(grid)
            label = Gtk.Label(label=title)
            grid.attach(label, 0, 0, 1, 1)
            label.get_style_context().add_class("category")
            next_row = 1           

            for pkg in pkg_list:                
                next_row += 1
                checkbutton = Gtk.CheckButton(label=pamac.get_app_name(pkg))
                checkbutton.connect("toggled", self.app_on_select, pkg)
                grid.attach(checkbutton, 0, next_row, 1, 1)
                pre_selected = load_yaml().get("pre-selected")

                if pkg in pre_selected:
                    checkbutton.set_active(True)
                image = pamac.get_app_icon(pkg)
                if image:                        
                    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(
                        filename=image,
                        width=32,
                        height=32,
                        preserve_aspect_ratio=True
                        )
                    icon = Gtk.Image.new_from_pixbuf(pixbuf)
                    grid.attach_next_to(icon, checkbutton, Gtk.PositionType.RIGHT, 2, 1)                         
               

            box.show_all()
            self.wizard.append_page(box)
            self.wizard.set_page_complete(box, True)
            self.wizard.set_page_title(box, title)
            self.wizard.set_page_type(box, Gtk.AssistantPageType.PROGRESS)

    def on_branch_changed(self, selected_branch):
        tree_iter = selected_branch.get_active_iter()
        if tree_iter is not None:
            model = selected_branch.get_model()
            name = model[tree_iter][:2][0].lower()
            if "testing" in name:
                self.branch = "testing"
            elif "unstable" in name:
                self.branch = "unstable"
            elif "stable" in name:
                self.branch = "stable"
        
    def done_page(self):
        box = Gtk.HBox(spacing=12)
        box.set_border_width(12)        
        grid = Gtk.Grid()
        label = Gtk.Label(
            label='All setup, press apply to start'
            )
        label.get_style_context().add_class("large-fonts")
        label.set_hexpand(True)
        box.pack_start(grid, True, True, 0)
        grid.attach(label, 0, 0, 1, 1)
        grid.attach(progressbar, 0, 2, 1, 1)
        grid.set_row_spacing(15)
        grid.props.valign = grid.props.halign = Gtk.Align.CENTER
        box.show_all()
        self.wizard.connect('apply', self.on_apply, label)
        self.wizard.append_page(box)
        self.wizard.set_page_complete(box, True)
        self.wizard.set_page_title(box, 'All Done')
        self.wizard.set_page_type(box, Gtk.AssistantPageType.CONFIRM)
        
    provider = Gtk.CssProvider()
    css = b"""
        .large-fonts {
            color: #fafafa;
            font-size: 20px;
            font-weight:bold;
            }
            
        .pamac {
            color: #fafafa;
            font-weight:bold;
            border-bottom: 40px solid transparent;
            }
            
        .white-fonts {
            color: #fafafa;
            font-weight:bold;
        }
            
        progress, trough {
            min-height: 1px;
        }
        
        progressbar > trough > progress {
            background-image: none;
            background-color: #e91e63;
            }
            
        .sidebar label {
            font-size:0;
            opacity:0;
            }
            
        .sidebar {
            border:0;
            }
            
        box .apps label:not(.category) {
            color: #fafafa;
            font-size:16px;
            font-weight:bold;
            padding:10px;
            }
            
        box, dialog {
            background:#4a148c;
            }
            
        entry {
            padding:8px;
            }
            
            
        label.category {
            border-bottom: 40px solid transparent;
            font-size: 32px;
            color: #fafafa;
            font-weight:bold;
            }
            
        button:first-child:not(.combo) {
            color:white;
            background:#f44336;
            }
            
        button:last-child:not(.combo) {
            color:white;
            background:#009688;
            }
            
        check {
            min-height: 20px;
            min-width: 20px;
        }
        
        .modal buttonbox {
            padding: 40px;
        }
            
        * {
            -GtkDialog-content-area-border:0;
            }
               
        .modal button:nth-child(2) {
            background:#fb8c00;
            color:white;
            }
        
        .combo {
            padding:10px;
            color:#fafafa;
            font-weight:bold;
            border:1px dashed shade(white, 0.5);
            }
                       
        .combo, .combo:focus, .combo:active, .combo:selected {
            background-color:transparent;
            }
        """

    provider.load_from_data(css)
    Gtk.StyleContext.add_provider_for_screen(
        Gdk.Screen.get_default(), provider,
        Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

   
def main():
    Wizard()
    Gtk.main()


if __name__ == '__main__':        
    if not os.path.exists("/etc/jde/live-iso"):
        main()
